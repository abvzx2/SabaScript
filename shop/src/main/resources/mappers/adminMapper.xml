<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.my.shop.mappers.adminMapper">
<!-- 카테고리 호출 -->
<select id="category" resultType="com.my.shop.vo.CategoryVO">
<![CDATA[
select
level, cateName, contents_category_code, catecodeRef
from tbl_category
start with catecodeRef is null connect by prior contents_category_code = catecodeRef
]]>
</select>
<insert id="register" parameterType="com.my.shop.vo.GoodsVO">
<![CDATA[
insert into tbl_contents(contents_id, contents_title, contents_category_code, gdsPrice, gdsStock, contents_description, contents_poster_img, contents_thumb_img, contents_video_url)
values
(seq_contents_id.nextval, #{contents_title}, #{contents_category_code}, #{gdsPrice}, #{gdsStock}, #{contents_description}, #{contents_poster_img}, #{contents_thumb_img}, #{contents_video_url})
]]>
</insert>
<!-- 상품목록 -->
<select id="goodslist" resultType="com.my.shop.vo.GoodsVO">
<![CDATA[
select
contents_id, contents_title, contents_category_code, gdsPrice, gdsStock, contents_description, contents_poster_img, contents_thumb_img, contents_created_at
from tbl_contents
order by contents_id desc
]]>
</select>
<select id="goodsView" resultType="com.my.shop.vo.GoodsViewVO">
<![CDATA[
select
g.contents_id, g.contents_title, g.contents_category_code, c.catecodeRef, c.cateName, gdsPrice, gdsStock, contents_description, contents_poster_img, contents_created_at,
g.contents_poster_img, g.contents_thumb_img, g.contents_video_url
from tbl_contents g
inner join tbl_category c
on g.contents_category_code = c.contents_category_code            
where g.contents_id = #{contents_id}
]]>
</select>
<update id="goodsModify">
<![CDATA[
update tbl_contents
set
contents_title = #{contents_title}, contents_category_code=#{contents_category_code}, gdsPrice = #{gdsPrice}, gdsStock=#{gdsStock}, contents_description=#{contents_description}, contents_poster_img=#{contents_poster_img}, contents_thumb_img=#{contents_thumb_img}
where contents_id = ${contents_id}
]]>
</update>
<delete id="goodsDelete">
<![CDATA[
delete tbl_contents where contents_id = #{contents_id}
]]>
</delete>
<insert id="addCart">
<![CDATA[
insert into tbl_cart (cartNum, userId, contents_id, cartStock) 
values 
(seq_tbl_cart.nextval, #{userId}, #{contents_id}, #{cartStock})
]]>
</insert>
<select id="cartList" resultType="com.my.shop.vo.CartListVO">
<![CDATA[
select
row_number() over(order by c.cartNum desc) as num,
c.cartNum, c.userId, c.contents_id, c.cartStock, c.addDate,
g.contents_title, g.gdsPrice, g.contents_thumb_img
from tbl_cart c
inner join tbl_contents g
on c.contents_id = g.contents_id
where c.userId = #{userId}
]]>
</select>
<select id="orderList" resultType="com.my.shop.vo.OrderVO">
<![CDATA[
select
orderId, userId, orderRec, userAddr1, userAddr2, userAddr3, orderPhone, amount, orderDate, delivery
from tbl_order
]]>
</select>
<select id="orderView" resultType="com.my.shop.vo.OrderListVO">
<![CDATA[
select
o.orderId, o.userId, o.orderRec, o.userAddr1, o.userAddr2, o.userAddr3, 
o.orderPhone, o.amount, o.orderDate, o.delivery,
d.orderDetailsNum, d.contents_id, d.cartStock,
g.contents_title, g.contents_thumb_img, g.gdsPrice
from tbl_order o
inner join tbl_order_details d
on o.orderId = d.orderId
inner join tbl_contents g
on d.contents_id = g.contents_id
where orderId = #{orderId}
]]>
</select>
<update id="delivery">
<![CDATA[
update tbl_order set delivery = #{delivery} where orderId = #{orderId}
]]>
</update>
<update id="changeStock">
<![CDATA[
update tbl_contents set gdsStock = gdsStock - #{gdsStock}
where contents_id = #{contents_id}
]]>
</update>
<select id="allReply" resultType="com.my.shop.vo.ReplyListVO">
<![CDATA[
select 
r.contents_id, r.userId, r.repNum, r.repCon, r.repDate,
m.userName
from tbl_reply r
inner join tbl_member m
on r.userId = m.userId
]]>
</select>
<delete id="deleteReply">
<![CDATA[
delete tbl_reply where repNum = #{repNum}
]]>
</delete>
<!-- 
Join : 두개 이상의 테이블에서 관련 열을 기준으로 행을 결합할때 사용
내부 조인[INNER JOIN] : 두 테이블에서 일치하는 값을 갖는 레코드를 선택
on g.contents_category_code = c.contents_category_code g테이블과 c테이블의 값이 같을때 두테이블의 데이터를 결합

왼쪽 조인[LEFT JOIN] : 왼쪽 테이블의 모든 레코드와 오른쪽 테이블에 일치하는 레코드를 리턴
오른쪽 조인[RIGHT JOIN]: 오른쪽 테이블의 모든 레코드와 왼쪽 테이블에 일치하는 레코드를 리턴
전체[FULL]:왼쪽 오른쪽 테이블 레코드에 일치하는 항목이 있을 경우 모든레코드 리턴
셀프[self]:테이블 자체가 자체적으로 조인됩니다

별칭 tbl_contents.contents_id 간단한 별칭 g.contents_id

import numpy as np
xpoint = numpy.array([0, 6])
 -->















</mapper>
<!-- 
start with catecodeRef is null => 계층적구조에 시작점
connect by prior contents_category_code = catecodeRef => 부모범주가 이전레벨(현재범주)와 일치하는지 재귀적으로 찾도록 지시
 -->
